// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int        @id @default(autoincrement())
  email      String     @unique
  password   String
  name       String
  company    String
  isAdmin    Boolean    @default(false)
  isApproved Boolean    @default(false)
  isBlocked  Boolean    @default(false)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  products   Product[]
  movements  Movement[]
  categories Category[]
  clients    Client[]
  sales      Sale[]
}

model Product {
  id          Int        @id @default(autoincrement())
  name        String
  description String?
  price       Decimal    @db.Decimal(10, 2)
  quantity    Int
  category    String
  userId      Int
  user        User       @relation(fields: [userId], references: [id])
  movements   Movement[]
  saleItems   SaleItem[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Movement {
  id        Int      @id @default(autoincrement())
  type      String // "entrada" or "saida"
  quantity  Int
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Client {
  id        Int      @id @default(autoincrement())
  name      String
  email     String?
  phone     String?
  address   String?
  document  String? // CPF ou CNPJ
  notes     String?  @db.Text
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  sales     Sale[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Sale {
  id            Int        @id @default(autoincrement())
  number        Int // Número sequencial da venda
  total         Decimal    @db.Decimal(10, 2)
  discount      Decimal?   @default(0) @db.Decimal(10, 2)
  paymentMethod String // "dinheiro", "cartao", "pix", etc.
  status        String // "concluída", "cancelada", etc.
  clientId      Int?
  client        Client?    @relation(fields: [clientId], references: [id])
  userId        Int
  user          User       @relation(fields: [userId], references: [id])
  items         SaleItem[]
  notes         String?    @db.Text
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model SaleItem {
  id        Int      @id @default(autoincrement())
  quantity  Int
  price     Decimal  @db.Decimal(10, 2)
  discount  Decimal? @default(0) @db.Decimal(10, 2)
  total     Decimal  @db.Decimal(10, 2)
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
  saleId    Int
  sale      Sale     @relation(fields: [saleId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
